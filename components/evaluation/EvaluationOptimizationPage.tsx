

import React, { useState, useMemo, useEffect } from 'react';
import AssetSelector from './AssetSelector';
import EvaluationDisplay from './EvaluationDisplay';
import { MOCK_EVALUATABLE_ASSETS } from '../../constants';
import { EvaluableAsset, AssetContent } from '../../types';
import { evaluateAsset, optimizeAsset } from '../../services/geminiService';
import Card from '../common/Card';
import { AlertTriangle } from 'lucide-react';

// The ViewState type defines the different steps in the evaluation/optimization workflow.
// This acts as a simple state machine to control what is displayed in the main panel.
type ViewState = 'welcome' | 'evaluating' | 'evaluation_result' | 'optimizing' | 'comparison';
type AssetFilter = 'All' | 'Quiz' | 'Assignment';

const EvaluationOptimizationPage: React.FC = () => {
    // State for the list of all evaluable assets (quizzes, assignments).
    // It's initialized from localStorage to persist changes across sessions.
    const [assets, setAssets] = useState<EvaluableAsset[]>(() => {
        try {
            const savedAssets = localStorage.getItem('evaluableAssets');
            return savedAssets ? JSON.parse(savedAssets) : MOCK_EVALUATABLE_ASSETS;
        } catch (e) {
            console.error("Failed to load assets from localStorage", e);
            return MOCK_EVALUATABLE_ASSETS;
        }
    });
    
    // This effect runs whenever the `assets` state changes, saving the updated
    // list back to localStorage.
    useEffect(() => {
        try {
            localStorage.setItem('evaluableAssets', JSON.stringify(assets));
        } catch (e) {
            console.error("Failed to save assets to localStorage", e);
        }
    }, [assets]);

    // State for the currently selected asset.
    const [selectedAsset, setSelectedAsset] = useState<EvaluableAsset | null>(null);
    // State to hold the text report generated by the Evaluator agent.
    const [evaluationReport, setEvaluationReport] = useState<string | null>(null);
    // State to hold the new, JSON-based content generated by the Optimizer agent.
    const [optimizedContent, setOptimizedContent] = useState<AssetContent | null>(null);
    // State to control the current view of the main panel (the state machine).
    const [view, setView] = useState<ViewState>('welcome');
    // State for handling and displaying errors from API calls.
    const [error, setError] = useState<string | null>(null);
    // State for the current asset type filter ('All', 'Quiz', 'Assignment').
    const [assetFilter, setAssetFilter] = useState<AssetFilter>('All');
    // State to track if the displayed report is newly generated or loaded from storage.
    const [reportSource, setReportSource] = useState<'new' | 'saved' | null>(null);

    // useMemo is used to efficiently re-calculate the list of displayed assets only
    // when the master `assets` list or the `assetFilter` changes.
    const filteredAssets = useMemo(() => {
        if (assetFilter === 'All') return assets;
        return assets.filter(asset => asset.type === assetFilter);
    }, [assets, assetFilter]);
    
    // This effect ensures that if the current filter causes the selected asset
    // to be hidden, the UI resets to a clean 'welcome' state.
    useEffect(() => {
        if (selectedAsset && !filteredAssets.find(a => a.id === selectedAsset.id)) {
            setSelectedAsset(null);
            setEvaluationReport(null);
            setOptimizedContent(null);
            setError(null);
            setReportSource(null);
            setView('welcome');
        }
    }, [filteredAssets, selectedAsset]);

    /**
     * Handles the selection of an asset from the list.
     * It also checks localStorage for a previously saved evaluation report for this asset
     * to avoid unnecessary API calls.
     */
    const handleSelectAsset = (asset: EvaluableAsset) => {
        setSelectedAsset(asset);
        // Reset state from any previous selections.
        setOptimizedContent(null);
        setError(null);
        setReportSource(null);
        try {
            const savedReport = localStorage.getItem(`evaluationReport-${asset.id}`);
            if (savedReport) {
                // If a saved report exists, display it immediately.
                setEvaluationReport(savedReport);
                setView('evaluation_result');
                setReportSource('saved');
            } else {
                // Otherwise, reset to the welcome state, awaiting an action.
                setEvaluationReport(null);
                setView('welcome');
            }
        } catch (e) {
            console.error("Could not access localStorage:", e);
            setError("Could not retrieve saved reports. Please ensure localStorage is enabled.");
            setEvaluationReport(null);
            setView('welcome');
        }
    };

    /**
     * Initiates a new evaluation by calling the AI service.
     * Manages the 'evaluating' loading state and handles success/error outcomes.
     */
    const handleEvaluate = async () => {
        if (!selectedAsset) return;
        setView('evaluating');
        setError(null);
        try {
            const report = await evaluateAsset(selectedAsset);
            setEvaluationReport(report);
            setView('evaluation_result');
            setReportSource('new'); // Mark this report as newly generated.
        } catch (err) {
            setError(err instanceof Error ? err.message : 'An unknown error occurred during evaluation.');
            setView('welcome'); // On error, return to the welcome screen.
        }
    };

    /**
     * Saves a newly generated evaluation report to localStorage for future use.
     * Also updates the `lastEvaluated` timestamp on the asset.
     */
    const handleSaveReport = () => {
        if (!selectedAsset || !evaluationReport) return;
        try {
            // Persist the report, keyed by the asset's unique ID.
            localStorage.setItem(`evaluationReport-${selectedAsset.id}`, evaluationReport);
            const today = new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
            // Update the asset in the main list to reflect the new evaluation date.
            setAssets(prevAssets =>
                prevAssets.map(a =>
                    a.id === selectedAsset.id ? { ...a, lastEvaluated: today } : a
                )
            );
            setReportSource('saved'); // Update the UI to show the "Report Saved" status.
        } catch (e) {
            console.error("Could not save report to localStorage:", e);
            setError("Failed to save the report. Your browser storage might be full or disabled.");
        }
    };

    /**
     * Initiates the optimization process based on the current evaluation report.
     * Manages the 'optimizing' loading state.
     */
    const handleOptimize = async () => {
        if (!selectedAsset || !evaluationReport) return;
        setView('optimizing');
        setError(null);
        try {
            const newContent = await optimizeAsset(selectedAsset, evaluationReport);
            setOptimizedContent(newContent);
            setView('comparison'); // On success, move to the comparison view.
        } catch (err) {
            setError(err instanceof Error ? err.message : 'An unknown error occurred during optimization.');
            setView('evaluation_result'); // On error, return to the report view.
        }
    };

    /**
     * Commits the changes from the AI optimization to the main asset list.
     * This replaces the old asset content with the new, optimized content.
     */
    const handleSaveChanges = () => {
        if (!selectedAsset || !optimizedContent) return;

        // Update the main `assets` state with the modified version of the asset.
        setAssets(prevAssets => prevAssets.map(asset => {
            if (asset.id === selectedAsset.id) {
                return {
                    ...asset,
                    content: optimizedContent,
                    questionCount: optimizedContent.questions.length,
                    lastEvaluated: new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),
                };
            }
            return asset;
        }));

        // After saving, reset the entire component to its initial state for a clean workflow.
        setSelectedAsset(null);
        setEvaluationReport(null);
        setOptimizedContent(null);
        setReportSource(null);
        setView('welcome');
    };
    
    /**
     * Discards the AI-generated optimization and returns the user to the
     * evaluation report view.
     */
    const handleDiscardChanges = () => {
        setOptimizedContent(null);
        setView('evaluation_result');
    };


    return (
        <div className="space-y-8 h-full">
            <h1 className="text-3xl font-bold text-brand-dark dark:text-brand-light">Evaluation & Optimization Center</h1>
             {/* A global error banner for the page */}
             {error && (
                <Card className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-500/50">
                    <div className="flex items-center">
                        <AlertTriangle className="w-6 h-6 text-brand-danger mr-3 flex-shrink-0" />
                        <div>
                            <h3 className="font-bold text-red-800 dark:text-red-300">An Error Occurred</h3>
                            <p className="text-sm text-red-700 dark:text-red-400">{error}</p>
                        </div>
                    </div>
                </Card>
            )}
            {/* Main two-column layout */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 h-[calc(100%-6rem)]">
                {/* Left Column: Asset Selection */}
                <div className="lg:col-span-1 h-full">
                   <AssetSelector 
                        assets={filteredAssets}
                        selectedAssetId={selectedAsset?.id || null}
                        onSelectAsset={handleSelectAsset}
                        onEvaluate={handleEvaluate}
                        isEvaluating={view === 'evaluating'}
                        filter={assetFilter}
                        onFilterChange={setAssetFilter}
                   />
                </div>
                {/* Right Column: Main Display Area (controlled by the state machine) */}
                <div className="lg:col-span-2 h-full">
                   <EvaluationDisplay 
                        view={view}
                        asset={selectedAsset}
                        evaluationReport={evaluationReport}
                        optimizedContent={optimizedContent}
                        onOptimize={handleOptimize}
                        reportSource={reportSource}
                        onSaveReport={handleSaveReport}
                        onSaveChanges={handleSaveChanges}
                        onDiscardChanges={handleDiscardChanges}
                   />
                </div>
            </div>
        </div>
    );
};

export default EvaluationOptimizationPage;
